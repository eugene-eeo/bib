#!/bin/bash
#
#  ▄▄▄▄· ▪  ▄▄▄▄· 
#  ▐█ ▀█▪██ ▐█ ▀█▪
#  ▐█▀▀█▄▐█·▐█▀▀█▄
#  ██▄▪▐█▐█▌██▄▪▐█
#  ·▀▀▀▀ ▀▀▀·▀▀▀▀ 
#  stupid pip script

# shellcheck disable=2155

usage() {
    echo
    echo "usage:"
    echo "    bib outdated"
    echo "    bib path [<version>]"
    echo "    bib cat  [<version>]"
    echo "    bib add <pkg> [<version>]"
    echo "    bib del <pkg> [<version>]"
    echo "    bib help | --help | -h"
    echo
    exit "$1"
}

main() {
    case "$1" in
        help|--help|-h)
            usage 0
            ;;
        outdated)
            shift;
            outdated "$@"
            ;;
        path)
            echo ~/.bib/"$(try_get_hash "$2")"
            ;;
        cat)
            cat "$($0 path "$2")" 2> /dev/null
            ;;
        add) shift; add "$@" ;;
        del) shift; del "$@" ;;
        *)   usage 1 ;;
    esac
}

get_version_hash() {
    echo "$1" | md5sum - | grep -oE '^.{8}'
}

init() {
    mkdir -p ~/.bib
    touch ~/.bib/"$1"
}

try_get_hash() {
    local version="$1"
    [ "$1" = '' ] && version=$(pyenv version-name || python --version)
    get_version_hash "$version"
}

outdated() {
    local version_hash=$(try_get_hash)
    init "$version_hash"
    comm <(pip list --outdated | tail +3 | cut -d ' ' -f1 | sort) \
         <(sort -u ~/.bib/"$version_hash") \
         -12
}

remove_line_in_file() {
    local contents=$(
        sort -u "$2" | while read -r line; do
            [ "$line" = '' ] && continue
            [ "$line" != "$1" ] && echo "$line"
        done
        )
    if [ "$contents" = '' ]; then
        echo -n '' > "$2"
    else
        echo "$contents" > "$2"
    fi
}

del() {
    local pkg=$1
    local version_hash=$(try_get_hash "$2")

    [ "$pkg" = "" ] && usage 1

    init "$version_hash"
    local file=~/.bib/"$version_hash"
    local tmpfile

    {
        # this is transactional, avoid nuking
        # ~/.bib/... if something goes wrong
        tmpfile=$(mktemp) \
            && cp "$file" "$tmpfile" \
            && remove_line_in_file "$pkg" "$tmpfile" \
            && mv "$tmpfile" "$file"
    } || rm "$tmpfile"
}

add() {
    local pkg=$1
    local version_hash=$(try_get_hash "$2")

    [ "$pkg" = "" ] && usage 1

    init "$version_hash"

    # check if the package is already present
    # if yes then don't do anything
    if [ "$(echo "$pkg" | comm - <(cat ~/.bib/"$version_hash") --nocheck-order -12)" = "" ]; then
        echo "$pkg" >> ~/.bib/"$version_hash"
    fi
}

main "$@"
